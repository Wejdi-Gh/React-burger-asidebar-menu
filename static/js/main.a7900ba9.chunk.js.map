{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onclick","setState","tog","state","react_default","a","createElement","className","defineProperty","style","display","id","width","onClick","href","marginLeft","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAmDeA,qBA/Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMPQ,QAAU,WAEXP,EAAKQ,SAAS,CAACC,KAAKT,EAAKU,MAAMD,OAP7BT,EAAKU,MAAO,CAACD,KAAM,GAFFT,wEAajB,OACEW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACrBH,EAAAC,EAAAC,cAAA,MAAAZ,OAAAc,EAAA,EAAAd,CAAA,CAAKa,UAAU,kDAAkDE,MAAO,CAACC,QAASd,KAAKO,MAAMD,IAAK,QAAQ,QAASS,GAAG,aAAtH,QAA0I,CAACC,MAAOhB,KAAKO,MAAMD,IAAK,MAAO,OACvKE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iCAClBM,QAASjB,KAAKI,SADd,cAEAI,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,IAAIP,UAAU,yBAAtB,UACAH,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,IAAIP,UAAU,yBAAtB,UACAH,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,IAAIP,UAAU,yBAAtB,WAGFH,EAAAC,EAAAC,cAAA,OAAKK,GAAG,OAAOF,MAAQ,CAACM,WAAYnB,KAAKO,MAAMD,IAAK,MAAO,OAE3DE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAQK,GAAG,UAAUJ,UAAU,8BAA8BE,MAAO,CAACC,QAASd,KAAKO,MAAMD,IAAK,OAAO,gBAAiBW,QAASjB,KAAKI,SAApI,UACAI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,uBAIJF,EAAAC,EAAAC,cAAA,OAAKU,IAAI,wGAAwGC,IAAI,MAAMR,MAAO,CAACG,MAAM,UAEzIR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACfH,EAAAC,EAAAC,cAAA,0EACAF,EAAAC,EAAAC,cAAA,gFACAF,EAAAC,EAAAC,cAAA,wEACAF,EAAAC,EAAAC,cAAA,wKAvCkBY,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a7900ba9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state= {tog : false}\n    \n     \n   }\n\n   onclick = ()=> {\n\n  this.setState({tog:!this.state.tog})\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n<div className=\"w3-sidebar w3-bar-block w3-card w3-animate-left\" style={{display: this.state.tog? \"block\":\"none\"}} id=\"mySidebar\" style ={{width :this.state.tog? \"25%\": \"0%\"}}>\n  <button className=\"w3-bar-item w3-button w3-large\"\n  onClick={this.onclick}>Close &times;</button>\n  <a href=\"#\" className=\"w3-bar-item w3-button\">Link 1</a>\n  <a href=\"#\" className=\"w3-bar-item w3-button\">Link 2</a>\n  <a href=\"#\" className=\"w3-bar-item w3-button\">Link 3</a>\n</div>\n\n<div id=\"main\" style ={{marginLeft :this.state.tog? \"25%\": \"0%\"}}>\n\n<div className=\"w3-teal\">\n  <button id=\"openNav\" className=\"w3-button w3-teal w3-xlarge\" style={{display: this.state.tog? \"none\":\"inline-block\"}} onClick={this.onclick}>&#9776;</button>\n  <div className=\"w3-container\">\n    <h1>My Page</h1>\n  </div>\n</div>\n\n<img src=\"https://images.salaun-holidays.com/(Image)-image-Norvege-Geiranger-fjord-58-fo_120403400-09032017.jpg\" alt=\"Car\" style={{width:\"100%\"}}/>\n\n<div className=\"w3-container\">\n<p>In this example, the sidebar is hidden (style=\"display:none\")</p>\n<p>It is shown when you click on the menu icon in the top left corner.</p>\n<p>When it is opened, it shifts the page content to the right.</p>\n<p>We use JavaScript to add a 25% left margin to the div element with id=\"main\" when this happens. The value \"25%\" matches the width of the sidebar.</p>\n</div>\n\n</div>\n     </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}